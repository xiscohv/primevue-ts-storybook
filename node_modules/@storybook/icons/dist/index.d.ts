import * as react from 'react';

declare const Photo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Component: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Grid: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Outline: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PhotoDrag: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GridAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Search: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Zoom: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ZoomOut: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ZoomReset: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Eye: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const EyeClose: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Lightning: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const LightningOff: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Contrast: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SwitchAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Mirror: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Grow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PaintBrush: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Ruler: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Stop: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Camera: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Video: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Speaker: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Play: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PlayBack: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PlayNext: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Rewind: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FastForward: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const StopAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SideBySide: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Stacked: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sun: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Moon: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Book: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Document: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Copy: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Category: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Folder: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Print: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GraphLine: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Calendar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GraphBar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Menu: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const MenuReverse: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Filter: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const DocChart: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const DocList: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Drag: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Markup: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bold: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Italic: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PaperClip: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ListOrdered: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ListUnordered: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Paragraph: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Markdown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Repo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Commit: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Branch: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PullRequest: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Merge: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Apple: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Linux: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Ubuntu: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Windows: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Chrome: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Storybook: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const AzureDevOps: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bitbucket: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Chromatic: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ComponentDriven: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Discord: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Facebook: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Figma: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GDrive: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Github: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Gitlab: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Google: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Graphql: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Medium: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Redux: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Twitter: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Youtube: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const VSCode: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Linkedin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Browser: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Tablet: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Mobile: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Watch: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sidebar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SidebarAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SidebarAltToggle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SidebarToggle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BottomBar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BottomBarToggle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CPU: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Database: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Memory: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Structure: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Box: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Power: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Edit: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Cog: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Nut: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Wrench: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Ellipsis: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Wand: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Check: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Form: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BatchDeny: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BatchAccept: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Controls: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Plus: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CloseAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Cross: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Trash: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PinAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Unpin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Add: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Subtract: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Close: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Delete: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Passed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Changed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Failed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Clear: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Comment: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CommentAdd: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const RequestChange: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Comments: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Chat: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Lock: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Unlock: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Key: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Outbox: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Credit: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Button: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Type: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PointerDefault: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PointerHand: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Command: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Info: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Question: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Support: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Alert: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const AlertAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Email: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Phone: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Link: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const LinkBroken: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bell: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const RSS: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ShareAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Share: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const JumpTo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CircleHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Circle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BookmarkHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bookmark: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Diamond: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const HeartHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Heart: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const StarHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Star: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Certificate: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Verified: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ThumbsUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Shield: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Basket: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Beaker: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Hourglass: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Flag: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CloudHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Cloud: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sticker: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronDown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronLeft: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronRight: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowDown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowLeft: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowRight: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidDown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidLeft: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidRight: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ExpandAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Collapse: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Expand: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Unfold: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Transfer: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Redirect: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Undo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Reply: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sync: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Upload: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Download: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Back: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Proceed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Refresh: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Globe: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Compass: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Location: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Pin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Time: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Dashboard: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Timer: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Home: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Admin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Direction: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const User: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const UserAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const UserAdd: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Users: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Profile: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FaceHappy: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FaceNeutral: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FaceSad: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Accessibility: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const AccessibilityAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;

declare const AllIcons_Accessibility: typeof Accessibility;
declare const AllIcons_AccessibilityAlt: typeof AccessibilityAlt;
declare const AllIcons_Add: typeof Add;
declare const AllIcons_Admin: typeof Admin;
declare const AllIcons_Alert: typeof Alert;
declare const AllIcons_AlertAlt: typeof AlertAlt;
declare const AllIcons_Apple: typeof Apple;
declare const AllIcons_ArrowDown: typeof ArrowDown;
declare const AllIcons_ArrowLeft: typeof ArrowLeft;
declare const AllIcons_ArrowRight: typeof ArrowRight;
declare const AllIcons_ArrowSolidDown: typeof ArrowSolidDown;
declare const AllIcons_ArrowSolidLeft: typeof ArrowSolidLeft;
declare const AllIcons_ArrowSolidRight: typeof ArrowSolidRight;
declare const AllIcons_ArrowSolidUp: typeof ArrowSolidUp;
declare const AllIcons_ArrowUp: typeof ArrowUp;
declare const AllIcons_AzureDevOps: typeof AzureDevOps;
declare const AllIcons_Back: typeof Back;
declare const AllIcons_Basket: typeof Basket;
declare const AllIcons_BatchAccept: typeof BatchAccept;
declare const AllIcons_BatchDeny: typeof BatchDeny;
declare const AllIcons_Beaker: typeof Beaker;
declare const AllIcons_Bell: typeof Bell;
declare const AllIcons_Bitbucket: typeof Bitbucket;
declare const AllIcons_Bold: typeof Bold;
declare const AllIcons_Book: typeof Book;
declare const AllIcons_Bookmark: typeof Bookmark;
declare const AllIcons_BookmarkHollow: typeof BookmarkHollow;
declare const AllIcons_BottomBar: typeof BottomBar;
declare const AllIcons_BottomBarToggle: typeof BottomBarToggle;
declare const AllIcons_Box: typeof Box;
declare const AllIcons_Branch: typeof Branch;
declare const AllIcons_Browser: typeof Browser;
declare const AllIcons_Button: typeof Button;
declare const AllIcons_CPU: typeof CPU;
declare const AllIcons_Calendar: typeof Calendar;
declare const AllIcons_Camera: typeof Camera;
declare const AllIcons_Category: typeof Category;
declare const AllIcons_Certificate: typeof Certificate;
declare const AllIcons_Changed: typeof Changed;
declare const AllIcons_Chat: typeof Chat;
declare const AllIcons_Check: typeof Check;
declare const AllIcons_ChevronDown: typeof ChevronDown;
declare const AllIcons_ChevronLeft: typeof ChevronLeft;
declare const AllIcons_ChevronRight: typeof ChevronRight;
declare const AllIcons_ChevronUp: typeof ChevronUp;
declare const AllIcons_Chromatic: typeof Chromatic;
declare const AllIcons_Chrome: typeof Chrome;
declare const AllIcons_Circle: typeof Circle;
declare const AllIcons_CircleHollow: typeof CircleHollow;
declare const AllIcons_Clear: typeof Clear;
declare const AllIcons_Close: typeof Close;
declare const AllIcons_CloseAlt: typeof CloseAlt;
declare const AllIcons_Cloud: typeof Cloud;
declare const AllIcons_CloudHollow: typeof CloudHollow;
declare const AllIcons_Cog: typeof Cog;
declare const AllIcons_Collapse: typeof Collapse;
declare const AllIcons_Command: typeof Command;
declare const AllIcons_Comment: typeof Comment;
declare const AllIcons_CommentAdd: typeof CommentAdd;
declare const AllIcons_Comments: typeof Comments;
declare const AllIcons_Commit: typeof Commit;
declare const AllIcons_Compass: typeof Compass;
declare const AllIcons_Component: typeof Component;
declare const AllIcons_ComponentDriven: typeof ComponentDriven;
declare const AllIcons_Contrast: typeof Contrast;
declare const AllIcons_Controls: typeof Controls;
declare const AllIcons_Copy: typeof Copy;
declare const AllIcons_Credit: typeof Credit;
declare const AllIcons_Cross: typeof Cross;
declare const AllIcons_Dashboard: typeof Dashboard;
declare const AllIcons_Database: typeof Database;
declare const AllIcons_Delete: typeof Delete;
declare const AllIcons_Diamond: typeof Diamond;
declare const AllIcons_Direction: typeof Direction;
declare const AllIcons_Discord: typeof Discord;
declare const AllIcons_DocChart: typeof DocChart;
declare const AllIcons_DocList: typeof DocList;
declare const AllIcons_Document: typeof Document;
declare const AllIcons_Download: typeof Download;
declare const AllIcons_Drag: typeof Drag;
declare const AllIcons_Edit: typeof Edit;
declare const AllIcons_Ellipsis: typeof Ellipsis;
declare const AllIcons_Email: typeof Email;
declare const AllIcons_Expand: typeof Expand;
declare const AllIcons_ExpandAlt: typeof ExpandAlt;
declare const AllIcons_Eye: typeof Eye;
declare const AllIcons_EyeClose: typeof EyeClose;
declare const AllIcons_FaceHappy: typeof FaceHappy;
declare const AllIcons_FaceNeutral: typeof FaceNeutral;
declare const AllIcons_FaceSad: typeof FaceSad;
declare const AllIcons_Facebook: typeof Facebook;
declare const AllIcons_Failed: typeof Failed;
declare const AllIcons_FastForward: typeof FastForward;
declare const AllIcons_Figma: typeof Figma;
declare const AllIcons_Filter: typeof Filter;
declare const AllIcons_Flag: typeof Flag;
declare const AllIcons_Folder: typeof Folder;
declare const AllIcons_Form: typeof Form;
declare const AllIcons_GDrive: typeof GDrive;
declare const AllIcons_Github: typeof Github;
declare const AllIcons_Gitlab: typeof Gitlab;
declare const AllIcons_Globe: typeof Globe;
declare const AllIcons_Google: typeof Google;
declare const AllIcons_GraphBar: typeof GraphBar;
declare const AllIcons_GraphLine: typeof GraphLine;
declare const AllIcons_Graphql: typeof Graphql;
declare const AllIcons_Grid: typeof Grid;
declare const AllIcons_GridAlt: typeof GridAlt;
declare const AllIcons_Grow: typeof Grow;
declare const AllIcons_Heart: typeof Heart;
declare const AllIcons_HeartHollow: typeof HeartHollow;
declare const AllIcons_Home: typeof Home;
declare const AllIcons_Hourglass: typeof Hourglass;
declare const AllIcons_Info: typeof Info;
declare const AllIcons_Italic: typeof Italic;
declare const AllIcons_JumpTo: typeof JumpTo;
declare const AllIcons_Key: typeof Key;
declare const AllIcons_Lightning: typeof Lightning;
declare const AllIcons_LightningOff: typeof LightningOff;
declare const AllIcons_Link: typeof Link;
declare const AllIcons_LinkBroken: typeof LinkBroken;
declare const AllIcons_Linkedin: typeof Linkedin;
declare const AllIcons_Linux: typeof Linux;
declare const AllIcons_ListOrdered: typeof ListOrdered;
declare const AllIcons_ListUnordered: typeof ListUnordered;
declare const AllIcons_Location: typeof Location;
declare const AllIcons_Lock: typeof Lock;
declare const AllIcons_Markdown: typeof Markdown;
declare const AllIcons_Markup: typeof Markup;
declare const AllIcons_Medium: typeof Medium;
declare const AllIcons_Memory: typeof Memory;
declare const AllIcons_Menu: typeof Menu;
declare const AllIcons_MenuReverse: typeof MenuReverse;
declare const AllIcons_Merge: typeof Merge;
declare const AllIcons_Mirror: typeof Mirror;
declare const AllIcons_Mobile: typeof Mobile;
declare const AllIcons_Moon: typeof Moon;
declare const AllIcons_Nut: typeof Nut;
declare const AllIcons_Outbox: typeof Outbox;
declare const AllIcons_Outline: typeof Outline;
declare const AllIcons_PaintBrush: typeof PaintBrush;
declare const AllIcons_PaperClip: typeof PaperClip;
declare const AllIcons_Paragraph: typeof Paragraph;
declare const AllIcons_Passed: typeof Passed;
declare const AllIcons_Phone: typeof Phone;
declare const AllIcons_Photo: typeof Photo;
declare const AllIcons_PhotoDrag: typeof PhotoDrag;
declare const AllIcons_Pin: typeof Pin;
declare const AllIcons_PinAlt: typeof PinAlt;
declare const AllIcons_Play: typeof Play;
declare const AllIcons_PlayBack: typeof PlayBack;
declare const AllIcons_PlayNext: typeof PlayNext;
declare const AllIcons_Plus: typeof Plus;
declare const AllIcons_PointerDefault: typeof PointerDefault;
declare const AllIcons_PointerHand: typeof PointerHand;
declare const AllIcons_Power: typeof Power;
declare const AllIcons_Print: typeof Print;
declare const AllIcons_Proceed: typeof Proceed;
declare const AllIcons_Profile: typeof Profile;
declare const AllIcons_PullRequest: typeof PullRequest;
declare const AllIcons_Question: typeof Question;
declare const AllIcons_RSS: typeof RSS;
declare const AllIcons_Redirect: typeof Redirect;
declare const AllIcons_Redux: typeof Redux;
declare const AllIcons_Refresh: typeof Refresh;
declare const AllIcons_Reply: typeof Reply;
declare const AllIcons_Repo: typeof Repo;
declare const AllIcons_RequestChange: typeof RequestChange;
declare const AllIcons_Rewind: typeof Rewind;
declare const AllIcons_Ruler: typeof Ruler;
declare const AllIcons_Search: typeof Search;
declare const AllIcons_Share: typeof Share;
declare const AllIcons_ShareAlt: typeof ShareAlt;
declare const AllIcons_Shield: typeof Shield;
declare const AllIcons_SideBySide: typeof SideBySide;
declare const AllIcons_Sidebar: typeof Sidebar;
declare const AllIcons_SidebarAlt: typeof SidebarAlt;
declare const AllIcons_SidebarAltToggle: typeof SidebarAltToggle;
declare const AllIcons_SidebarToggle: typeof SidebarToggle;
declare const AllIcons_Speaker: typeof Speaker;
declare const AllIcons_Stacked: typeof Stacked;
declare const AllIcons_Star: typeof Star;
declare const AllIcons_StarHollow: typeof StarHollow;
declare const AllIcons_Sticker: typeof Sticker;
declare const AllIcons_Stop: typeof Stop;
declare const AllIcons_StopAlt: typeof StopAlt;
declare const AllIcons_Storybook: typeof Storybook;
declare const AllIcons_Structure: typeof Structure;
declare const AllIcons_Subtract: typeof Subtract;
declare const AllIcons_Sun: typeof Sun;
declare const AllIcons_Support: typeof Support;
declare const AllIcons_SwitchAlt: typeof SwitchAlt;
declare const AllIcons_Sync: typeof Sync;
declare const AllIcons_Tablet: typeof Tablet;
declare const AllIcons_ThumbsUp: typeof ThumbsUp;
declare const AllIcons_Time: typeof Time;
declare const AllIcons_Timer: typeof Timer;
declare const AllIcons_Transfer: typeof Transfer;
declare const AllIcons_Trash: typeof Trash;
declare const AllIcons_Twitter: typeof Twitter;
declare const AllIcons_Type: typeof Type;
declare const AllIcons_Ubuntu: typeof Ubuntu;
declare const AllIcons_Undo: typeof Undo;
declare const AllIcons_Unfold: typeof Unfold;
declare const AllIcons_Unlock: typeof Unlock;
declare const AllIcons_Unpin: typeof Unpin;
declare const AllIcons_Upload: typeof Upload;
declare const AllIcons_User: typeof User;
declare const AllIcons_UserAdd: typeof UserAdd;
declare const AllIcons_UserAlt: typeof UserAlt;
declare const AllIcons_Users: typeof Users;
declare const AllIcons_VSCode: typeof VSCode;
declare const AllIcons_Verified: typeof Verified;
declare const AllIcons_Video: typeof Video;
declare const AllIcons_Wand: typeof Wand;
declare const AllIcons_Watch: typeof Watch;
declare const AllIcons_Windows: typeof Windows;
declare const AllIcons_Wrench: typeof Wrench;
declare const AllIcons_Youtube: typeof Youtube;
declare const AllIcons_Zoom: typeof Zoom;
declare const AllIcons_ZoomOut: typeof ZoomOut;
declare const AllIcons_ZoomReset: typeof ZoomReset;
declare namespace AllIcons {
  export {
    AllIcons_Accessibility as Accessibility,
    AllIcons_AccessibilityAlt as AccessibilityAlt,
    AllIcons_Add as Add,
    AllIcons_Admin as Admin,
    AllIcons_Alert as Alert,
    AllIcons_AlertAlt as AlertAlt,
    AllIcons_Apple as Apple,
    AllIcons_ArrowDown as ArrowDown,
    AllIcons_ArrowLeft as ArrowLeft,
    AllIcons_ArrowRight as ArrowRight,
    AllIcons_ArrowSolidDown as ArrowSolidDown,
    AllIcons_ArrowSolidLeft as ArrowSolidLeft,
    AllIcons_ArrowSolidRight as ArrowSolidRight,
    AllIcons_ArrowSolidUp as ArrowSolidUp,
    AllIcons_ArrowUp as ArrowUp,
    AllIcons_AzureDevOps as AzureDevOps,
    AllIcons_Back as Back,
    AllIcons_Basket as Basket,
    AllIcons_BatchAccept as BatchAccept,
    AllIcons_BatchDeny as BatchDeny,
    AllIcons_Beaker as Beaker,
    AllIcons_Bell as Bell,
    AllIcons_Bitbucket as Bitbucket,
    AllIcons_Bold as Bold,
    AllIcons_Book as Book,
    AllIcons_Bookmark as Bookmark,
    AllIcons_BookmarkHollow as BookmarkHollow,
    AllIcons_BottomBar as BottomBar,
    AllIcons_BottomBarToggle as BottomBarToggle,
    AllIcons_Box as Box,
    AllIcons_Branch as Branch,
    AllIcons_Browser as Browser,
    AllIcons_Button as Button,
    AllIcons_CPU as CPU,
    AllIcons_Calendar as Calendar,
    AllIcons_Camera as Camera,
    AllIcons_Category as Category,
    AllIcons_Certificate as Certificate,
    AllIcons_Changed as Changed,
    AllIcons_Chat as Chat,
    AllIcons_Check as Check,
    AllIcons_ChevronDown as ChevronDown,
    AllIcons_ChevronLeft as ChevronLeft,
    AllIcons_ChevronRight as ChevronRight,
    AllIcons_ChevronUp as ChevronUp,
    AllIcons_Chromatic as Chromatic,
    AllIcons_Chrome as Chrome,
    AllIcons_Circle as Circle,
    AllIcons_CircleHollow as CircleHollow,
    AllIcons_Clear as Clear,
    AllIcons_Close as Close,
    AllIcons_CloseAlt as CloseAlt,
    AllIcons_Cloud as Cloud,
    AllIcons_CloudHollow as CloudHollow,
    AllIcons_Cog as Cog,
    AllIcons_Collapse as Collapse,
    AllIcons_Command as Command,
    AllIcons_Comment as Comment,
    AllIcons_CommentAdd as CommentAdd,
    AllIcons_Comments as Comments,
    AllIcons_Commit as Commit,
    AllIcons_Compass as Compass,
    AllIcons_Component as Component,
    AllIcons_ComponentDriven as ComponentDriven,
    AllIcons_Contrast as Contrast,
    AllIcons_Controls as Controls,
    AllIcons_Copy as Copy,
    AllIcons_Credit as Credit,
    AllIcons_Cross as Cross,
    AllIcons_Dashboard as Dashboard,
    AllIcons_Database as Database,
    AllIcons_Delete as Delete,
    AllIcons_Diamond as Diamond,
    AllIcons_Direction as Direction,
    AllIcons_Discord as Discord,
    AllIcons_DocChart as DocChart,
    AllIcons_DocList as DocList,
    AllIcons_Document as Document,
    AllIcons_Download as Download,
    AllIcons_Drag as Drag,
    AllIcons_Edit as Edit,
    AllIcons_Ellipsis as Ellipsis,
    AllIcons_Email as Email,
    AllIcons_Expand as Expand,
    AllIcons_ExpandAlt as ExpandAlt,
    AllIcons_Eye as Eye,
    AllIcons_EyeClose as EyeClose,
    AllIcons_FaceHappy as FaceHappy,
    AllIcons_FaceNeutral as FaceNeutral,
    AllIcons_FaceSad as FaceSad,
    AllIcons_Facebook as Facebook,
    AllIcons_Failed as Failed,
    AllIcons_FastForward as FastForward,
    AllIcons_Figma as Figma,
    AllIcons_Filter as Filter,
    AllIcons_Flag as Flag,
    AllIcons_Folder as Folder,
    AllIcons_Form as Form,
    AllIcons_GDrive as GDrive,
    AllIcons_Github as Github,
    AllIcons_Gitlab as Gitlab,
    AllIcons_Globe as Globe,
    AllIcons_Google as Google,
    AllIcons_GraphBar as GraphBar,
    AllIcons_GraphLine as GraphLine,
    AllIcons_Graphql as Graphql,
    AllIcons_Grid as Grid,
    AllIcons_GridAlt as GridAlt,
    AllIcons_Grow as Grow,
    AllIcons_Heart as Heart,
    AllIcons_HeartHollow as HeartHollow,
    AllIcons_Home as Home,
    AllIcons_Hourglass as Hourglass,
    AllIcons_Info as Info,
    AllIcons_Italic as Italic,
    AllIcons_JumpTo as JumpTo,
    AllIcons_Key as Key,
    AllIcons_Lightning as Lightning,
    AllIcons_LightningOff as LightningOff,
    AllIcons_Link as Link,
    AllIcons_LinkBroken as LinkBroken,
    AllIcons_Linkedin as Linkedin,
    AllIcons_Linux as Linux,
    AllIcons_ListOrdered as ListOrdered,
    AllIcons_ListUnordered as ListUnordered,
    AllIcons_Location as Location,
    AllIcons_Lock as Lock,
    AllIcons_Markdown as Markdown,
    AllIcons_Markup as Markup,
    AllIcons_Medium as Medium,
    AllIcons_Memory as Memory,
    AllIcons_Menu as Menu,
    AllIcons_MenuReverse as MenuReverse,
    AllIcons_Merge as Merge,
    AllIcons_Mirror as Mirror,
    AllIcons_Mobile as Mobile,
    AllIcons_Moon as Moon,
    AllIcons_Nut as Nut,
    AllIcons_Outbox as Outbox,
    AllIcons_Outline as Outline,
    AllIcons_PaintBrush as PaintBrush,
    AllIcons_PaperClip as PaperClip,
    AllIcons_Paragraph as Paragraph,
    AllIcons_Passed as Passed,
    AllIcons_Phone as Phone,
    AllIcons_Photo as Photo,
    AllIcons_PhotoDrag as PhotoDrag,
    AllIcons_Pin as Pin,
    AllIcons_PinAlt as PinAlt,
    AllIcons_Play as Play,
    AllIcons_PlayBack as PlayBack,
    AllIcons_PlayNext as PlayNext,
    AllIcons_Plus as Plus,
    AllIcons_PointerDefault as PointerDefault,
    AllIcons_PointerHand as PointerHand,
    AllIcons_Power as Power,
    AllIcons_Print as Print,
    AllIcons_Proceed as Proceed,
    AllIcons_Profile as Profile,
    AllIcons_PullRequest as PullRequest,
    AllIcons_Question as Question,
    AllIcons_RSS as RSS,
    AllIcons_Redirect as Redirect,
    AllIcons_Redux as Redux,
    AllIcons_Refresh as Refresh,
    AllIcons_Reply as Reply,
    AllIcons_Repo as Repo,
    AllIcons_RequestChange as RequestChange,
    AllIcons_Rewind as Rewind,
    AllIcons_Ruler as Ruler,
    AllIcons_Search as Search,
    AllIcons_Share as Share,
    AllIcons_ShareAlt as ShareAlt,
    AllIcons_Shield as Shield,
    AllIcons_SideBySide as SideBySide,
    AllIcons_Sidebar as Sidebar,
    AllIcons_SidebarAlt as SidebarAlt,
    AllIcons_SidebarAltToggle as SidebarAltToggle,
    AllIcons_SidebarToggle as SidebarToggle,
    AllIcons_Speaker as Speaker,
    AllIcons_Stacked as Stacked,
    AllIcons_Star as Star,
    AllIcons_StarHollow as StarHollow,
    AllIcons_Sticker as Sticker,
    AllIcons_Stop as Stop,
    AllIcons_StopAlt as StopAlt,
    AllIcons_Storybook as Storybook,
    AllIcons_Structure as Structure,
    AllIcons_Subtract as Subtract,
    AllIcons_Sun as Sun,
    AllIcons_Support as Support,
    AllIcons_SwitchAlt as SwitchAlt,
    AllIcons_Sync as Sync,
    AllIcons_Tablet as Tablet,
    AllIcons_ThumbsUp as ThumbsUp,
    AllIcons_Time as Time,
    AllIcons_Timer as Timer,
    AllIcons_Transfer as Transfer,
    AllIcons_Trash as Trash,
    AllIcons_Twitter as Twitter,
    AllIcons_Type as Type,
    AllIcons_Ubuntu as Ubuntu,
    AllIcons_Undo as Undo,
    AllIcons_Unfold as Unfold,
    AllIcons_Unlock as Unlock,
    AllIcons_Unpin as Unpin,
    AllIcons_Upload as Upload,
    AllIcons_User as User,
    AllIcons_UserAdd as UserAdd,
    AllIcons_UserAlt as UserAlt,
    AllIcons_Users as Users,
    AllIcons_VSCode as VSCode,
    AllIcons_Verified as Verified,
    AllIcons_Video as Video,
    AllIcons_Wand as Wand,
    AllIcons_Watch as Watch,
    AllIcons_Windows as Windows,
    AllIcons_Wrench as Wrench,
    AllIcons_Youtube as Youtube,
    AllIcons_Zoom as Zoom,
    AllIcons_ZoomOut as ZoomOut,
    AllIcons_ZoomReset as ZoomReset,
  };
}

declare const iconList: {
    name: string;
    icons: string[];
}[];

type Icons = keyof typeof AllIcons;

export { Accessibility, AccessibilityAlt, Add, Admin, Alert, AlertAlt, Apple, ArrowDown, ArrowLeft, ArrowRight, ArrowSolidDown, ArrowSolidLeft, ArrowSolidRight, ArrowSolidUp, ArrowUp, AzureDevOps, Back, Basket, BatchAccept, BatchDeny, Beaker, Bell, Bitbucket, Bold, Book, Bookmark, BookmarkHollow, BottomBar, BottomBarToggle, Box, Branch, Browser, Button, CPU, Calendar, Camera, Category, Certificate, Changed, Chat, Check, ChevronDown, ChevronLeft, ChevronRight, ChevronUp, Chromatic, Chrome, Circle, CircleHollow, Clear, Close, CloseAlt, Cloud, CloudHollow, Cog, Collapse, Command, Comment, CommentAdd, Comments, Commit, Compass, Component, ComponentDriven, Contrast, Controls, Copy, Credit, Cross, Dashboard, Database, Delete, Diamond, Direction, Discord, DocChart, DocList, Document, Download, Drag, Edit, Ellipsis, Email, Expand, ExpandAlt, Eye, EyeClose, FaceHappy, FaceNeutral, FaceSad, Facebook, Failed, FastForward, Figma, Filter, Flag, Folder, Form, GDrive, Github, Gitlab, Globe, Google, GraphBar, GraphLine, Graphql, Grid, GridAlt, Grow, Heart, HeartHollow, Home, Hourglass, Icons, Info, Italic, JumpTo, Key, Lightning, LightningOff, Link, LinkBroken, Linkedin, Linux, ListOrdered, ListUnordered, Location, Lock, Markdown, Markup, Medium, Memory, Menu, MenuReverse, Merge, Mirror, Mobile, Moon, Nut, Outbox, Outline, PaintBrush, PaperClip, Paragraph, Passed, Phone, Photo, PhotoDrag, Pin, PinAlt, Play, PlayBack, PlayNext, Plus, PointerDefault, PointerHand, Power, Print, Proceed, Profile, PullRequest, Question, RSS, Redirect, Redux, Refresh, Reply, Repo, RequestChange, Rewind, Ruler, Search, Share, ShareAlt, Shield, SideBySide, Sidebar, SidebarAlt, SidebarAltToggle, SidebarToggle, Speaker, Stacked, Star, StarHollow, Sticker, Stop, StopAlt, Storybook, Structure, Subtract, Sun, Support, SwitchAlt, Sync, Tablet, ThumbsUp, Time, Timer, Transfer, Trash, Twitter, Type, Ubuntu, Undo, Unfold, Unlock, Unpin, Upload, User, UserAdd, UserAlt, Users, VSCode, Verified, Video, Wand, Watch, Windows, Wrench, Youtube, Zoom, ZoomOut, ZoomReset, iconList };
